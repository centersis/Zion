<?phpnamespace Centersis\Zion\Arquivo;use Centersis\Zion\Exception\ErrorException;use Centersis\Zion\Exception\ValidationException;class ManipulaArquivo extends ManipulaDiretorio{    public function __construct()    {        parent::__construct();    }    /**     * Recupera a extenssão de um arquivo atraves da do seu nome     * @param string $arquivo     * @return array     */    public function extenssaoArquivo($arquivo)    {        if (substr_count($arquivo, '.') < 1) {            return '';        }        $vetExt = explode(".", $arquivo);        return $vetExt[count($vetExt) - 1];    }    /**     * Faz o upload de um arquivo     * @param string $origem - caminho de origem do arquivo     * @param string $destino - caminho de destino do arquivo     */    public function uploadArquivo($origem, $destino)    {        //Verifica se a pasta permite gravação        if (!$this->permiteEscrita(dirname($destino))) {            throw new ErrorException("A pasta onde você esta tentando gravar o arquivo não tem permissão de escrita, contate o administrador do sistema.");        }        //Verifica se o arquivo ja existe        if ($this->arquivoExiste($destino)) {            //Se sim verifica se tem permissão para substitui-lo            if (!$this->permiteEscrita($destino)) {                throw new ErrorException("Este arquivo já existe e você não tem permissão para substituí-lo.");            }        }        //Upload        if ($this->arquivoExiste($origem)) {            if (!copy($origem, $destino)) {                throw new ErrorException("Não foi possivel fazer o upload! " . $destino);            }        } else {            throw new ErrorException("Arquivo não encontrado!");        }    }        public function uploadArquivoBase64($base64String, $destino)    {        //Verifica se a pasta permite gravação        if (!$this->permiteEscrita(dirname($destino))) {            throw new ErrorException("A pasta onde você esta tentando gravar o arquivo não tem permissão de escrita, contate o administrador do sistema.");        }        //Verifica se o arquivo ja existe        if ($this->arquivoExiste($destino)) {            //Se sim verifica se tem permissão para substitui-lo            if (!$this->permiteEscrita($destino)) {                throw new ErrorException("Este arquivo já existe e você não tem permissão para substituí-lo.");            }        }        //Upload        if ($base64String) {            $this->base64ToJpeg($base64String, $destino);        } else {            throw new ErrorException("Arquivo não encontradoYY!");        }    }    public function base64ToJpeg($base64String, $outputFile)    {        // open the output file for writing        $ifp = fopen($outputFile, 'wb');        // split the string on commas        // $data[ 0 ] == "data:image/png;base64"        // $data[ 1 ] == <actual base64 string>        $data = explode(',', $base64String);        // we could add validation here with ensuring count( $data ) > 1        fwrite($ifp, base64_decode($data[1]));        // clean up the file resource        fclose($ifp);        return $outputFile;    }    public function substituir($origem, $localizarSubstituir)    {        $link = fopen($origem, "r");        $buffer = '';        while (!feof($link)) {            $linha = fgets($link, 4096);            if (is_array($localizarSubstituir)) {                foreach ($localizarSubstituir as $chave => $valor) {                    $linha = str_replace($chave, $valor, $linha);                }            }            $buffer .= $linha;        }        return $buffer;    }    public function gravaArquivo($origem, $conteudo)    {        if (is_file($origem)) {            throw new ValidationException("O Arquivo já existe:\n" . $origem);        }        //Gravando o Novo Arquivo        $link = fopen($origem, "a");        fwrite($link, $conteudo);        if (!fclose($link)) {            throw new ErrorException("Não foi possivel gerar o arquivo:\n" . $origem);        }    }    public function localizarESubstituirRecursivo($origem, $localizarSubstituir, $ext = [], $especificos = [])    {        $iterator = new \DirectoryIterator($origem);        foreach ($iterator as $info) {            if ($info->isFile()) {                if ($ext and ! in_array($this->extenssaoArquivo($info->getFilename()), $ext)) {                    continue;                }                if ($especificos and ! in_array($info->getFilename(), $especificos)) {                    continue;                }                $origemAtual = $origem . $this->ds . $info->getFilename();                $conteudo = $this->substituir($origemAtual, $localizarSubstituir);                $this->removeArquivo($origemAtual);                $this->gravaArquivo($origemAtual, $conteudo);            } elseif (!$info->isDot()) {                $this->localizarESubstituirRecursivo($origem . $this->ds . $info->getFilename(), $localizarSubstituir, $ext);            }        }    }    public function localizarESubstituir($origem, $localizarSubstituir, $ext = [], $especificos = [])    {        $iterator = new \DirectoryIterator($origem);        foreach ($iterator as $info) {            if ($info->isFile()) {                if ($ext and ! in_array($this->extenssaoArquivo($info->getFilename()), $ext)) {                    continue;                }                if ($especificos and ! in_array($info->getFilename(), $especificos)) {                    continue;                }                $origemAtual = $origem . $this->ds . $info->getFilename();                $conteudo = $this->substituir($origemAtual, $localizarSubstituir);                $this->removeArquivo($origemAtual);                $this->gravaArquivo($origemAtual, $conteudo);            }        }    }}