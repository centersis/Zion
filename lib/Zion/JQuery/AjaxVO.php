<?phpnamespace Zion\JQuery;use Zion\Exception\ErrorException;class AjaxVO{    private $url;    private $accepts;    private $async;    private $beforeSend;    private $cache;    private $complete;    private $contents;    private $contentType;    private $context;    private $crossDomain;    private $data;    private $dataFilter;    private $dataType;    private $error;    private $global;    private $headers;    private $ifModified;    private $isLocal;    private $jsonp;    private $jsonpCallback;    private $mimeType;    private $password;    private $processData;    private $scriptCharset;    private $statusCode;    private $success;    private $timeout;    private $traditional;    private $username;    private $done;    private $fail;    private $always;    private $funcao;    private $objAjax;    public function __construct($obj)    {        $this->objAjax = $obj;    }    public function criar()    {        return $this->objAjax->criar();    }    public function getUrl()    {        return $this->url;    }    public function setUrl($url)    {        if (!is_null($url)) {            $this->url = $url;            return $this;        } else {            throw new ErrorException("url: Nenhum valor informado");        }    }    public function getAccepts()    {        return $this->accepts;    }    public function setAccepts($accepts)    {        if (!is_null($accepts)) {            $this->accepts = $accepts;            return $this;        } else {            throw new ErrorException("accepts: Nenhum valor informado");        }    }    public function getAsync()    {        return $this->async;    }    public function setAsync($async)    {        if (strtolower($async) == "true" or strtolower($async) == "false") {            $this->async = $async;            return $this;        } else {            throw new ErrorException("async: Voce deve informar true ou false.");        }    }    public function getBeforeSend()    {        return $this->beforeSend;    }    public function setBeforeSend($beforeSend)    {        if (!is_null($beforeSend)) {            $this->beforeSend = $beforeSend;            return $this;        } else {            throw new ErrorException("beforeSend: Nenhum valor informado.");        }    }    public function getCache()    {        return $this->cache;    }    public function setCache($cache)    {        if (strtolower($cache) == "true" or strtolower($cache) == "false") {            $this->cache = $cache;            return $this;        } else {            throw new ErrorException("cache: Voce deve informar true ou false.");        }    }    public function getComplete()    {        return $this->complete;    }    public function setComplete($complete)    {        if (!is_null($complete)) {            $this->complete = $complete;            return $this;        } else {            throw new ErrorException("complete: Nenhum valor informado.");        }    }    public function getContents()    {        return $this->contents;    }    public function setContents($contents)    {        if (!is_null($contents)) {            $this->contents = $contents;            return $this;        } else {            throw new ErrorException("contents: Nenhum valor informado.");        }    }    public function getContentType()    {        return $this->contentType;    }    public function setContentType($contentType)    {        if (!is_null($contentType)) {            $this->contentType = $contentType;            return $this;        } else {            throw new ErrorException("contentType: Nenhum valor informado.");        }    }    public function getContext()    {        return $this->context;    }    public function setContext($context)    {        if (!is_null($context)) {            $this->context = $context;            return $this;        } else {            throw new ErrorException("context: Nenhum valor informado.");        }    }    public function getCrossDomain()    {        return $this->crossDomain;    }    public function setCrossDomain($crossDomain)    {        if (strtolower($crossDomain) == "true" or strtolower($crossDomain) == "false") {            $this->crossDomain = $crossDomain;            return $this;        } else {            throw new ErrorException("crossDomain: Voce deve informar true ou false.");        }    }    public function getData()    {        return $this->data;    }    public function setData($data)    {        if (!is_null($data)) {            $this->data = $data;            return $this;        } else {            throw new ErrorException("data: Nenhum valor informado.");        }    }    public function getDataFilter()    {        return $this->dataFilter;    }    public function setDataFilter($dataFilter)    {        if (!is_null($dataFilter)) {            $this->dataFilter = $dataFilter;            return $this;        } else {            throw new ErrorException("dataFilter: Nenhum valor informado.");        }    }    public function getDataType()    {        return $this->dataType;    }    public function setDataType($dataType)    {        if (strtolower($dataType) == "xml" or strtolower($dataType) == "json" or strtolower($dataType) == "script" or strtolower($dataType) == "html") {            $this->dataType = $dataType;            return $this;        } else {            throw new ErrorException("crossDomain: Voce deve informar xml, json, script, or html.");        }    }    public function getError()    {        return $this->error;    }    public function setError($error)    {        if (!is_null($error)) {            $this->error = $error;            return $this;        } else {            throw new ErrorException("error: Nenhum valor informado.");        }    }    public function getGlobal()    {        return $this->global;    }    public function setGlobal($global)    {        if (strtolower($global) == "true" or strtolower($global) == "false") {            $this->global = $global;            return $this;        } else {            throw new ErrorException("global: Voce deve informar true ou false.");        }    }    public function getHeaders()    {        return $this->headers;    }    public function setHeaders($headers)    {        if (!is_null($headers)) {            $this->headers = $headers;            return $this;        } else {            throw new ErrorException("headers: Nenhum valor informado.");        }    }    public function getIfModified()    {        return $this->ifModified;    }    public function setIfModified($ifModified)    {        if (strtolower($ifModified) == "true" or strtolower($ifModified) == "false") {            $this->ifModified = $ifModified;            return $this;        } else {            throw new ErrorException("ifModified: Voce deve informar true ou false.");        }    }    public function getIsLocal()    {        return $this->isLocal;    }    public function setIsLocal($isLocal)    {        if (strtolower($isLocal) == "true" or strtolower($isLocal) == "false") {            $this->isLocal = $isLocal;            return $this;        } else {            throw new ErrorException("isLocal: Voce deve informar true ou false.");        }    }    public function getJsonp()    {        return $this->jsonp;    }    public function setJsonp($jsonp)    {        if (!is_null($jsonp)) {            $this->jsonp = $jsonp;            return $this;        } else {            throw new ErrorException("jsonp: Nenhum valor informado.");        }    }    public function getJsonpCallback()    {        return $this->jsonpCallback;    }    public function setJsonpCallback($jsonpCallback)    {        if (!is_null($jsonpCallback)) {            $this->jsonpCallback = $jsonpCallback;            return $this;        } else {            throw new ErrorException("jsonpCallback: Nenhum valor informado.");        }    }    public function getMimeType()    {        return $this->mimeType;    }    public function setMimeType($mimeType)    {        if (!is_null($mimeType)) {            $this->mimeType = $mimeType;            return $this;        } else {            throw new ErrorException("mimeType: Nenhum valor informado.");        }    }    public function getPassword()    {        return $this->password;    }    public function setPassword($password)    {        if (!is_null($password)) {            $this->password = $password;            return $this;        } else {            throw new ErrorException("password: Nenhum valor informado.");        }    }    public function getProcessData()    {        return $this->processData;    }    public function setProcessData($processData)    {        if (strtolower($processData) == "true" or strtolower($processData) == "false") {            $this->processData = $processData;            return $this;        } else {            throw new ErrorException("processData: Voce deve informar true ou false.");        }    }    public function getScript()    {        return $this->script;    }    public function setScript($script)    {        if (!is_null($script)) {            $this->script = $script;            return $this;        } else {            throw new ErrorException("script: Nenhum valor informado.");        }    }    public function getScriptCharset()    {        return $this->scriptCharset;    }    public function setScriptCharset($scriptCharset)    {        if (!is_null($scriptCharset)) {            $this->scriptCharset = $scriptCharset;            return $this;        } else {            throw new ErrorException("scriptCharset: Nenhum valor informado.");        }    }    public function getStatusCode()    {        return $this->statusCode;    }    public function setStatusCode($statusCode)    {        if (!is_null($statusCode)) {            $this->statusCode = $statusCode;            return $this;        } else {            throw new ErrorException("statusCode: Nenhum valor informado.");        }    }    public function getSuccess()    {        return $this->success;    }    public function setSuccess($success)    {        if (!is_null($success)) {            $this->success = $success;            return $this;        } else {            throw new ErrorException("success: Nenhum valor informado.");        }    }    public function getTimeout()    {        return $this->timeout;    }    public function setTimeout($timeout)    {        if (is_numeric($timeout)) {            $this->timeout = $timeout;            return $this;        } else {            throw new ErrorException("timeout: O valor informado nao e numerico.");        }    }    public function getTraditional()    {        return $this->traditional;    }    public function setTraditional($traditional)    {        if (strtolower($traditional) == "true" or strtolower($traditional) == "false") {            $this->traditional = $traditional;            return $this;        } else {            throw new ErrorException("traditional: Voce deve informar true ou false.");        }    }    public function getUsername()    {        return $this->username;    }    public function setUsername($username)    {        if (!is_null($username)) {            $this->username = $username;            return $this;        } else {            throw new ErrorException("username: Nenhum valor informado.");        }    }    public function getDone()    {        return $this->done;    }    public function setDone($done)    {        if (!is_null($done)) {            $this->done = $done;            return $this;        } else {            throw new ErrorException("done: Nenhum valor informado.");        }    }    public function getFail()    {        return $this->fail;    }    public function setFail($fail)    {        if (!is_null($fail)) {            $this->fail = $fail;            return $this;        } else {            throw new ErrorException("fail: Nenhum valor informado.");        }    }    public function getAlways()    {        return $this->always;    }    public function setAlways($always)    {        if (!is_null($always)) {            $this->always = $always;            return $this;        } else {            throw new ErrorException("always: Nenhum valor informado.");        }    }    public function getFuncao()    {        return $this->funcao;    }    public function setFuncao($funcao)    {        if (!is_null($funcao)) {            $this->funcao = $funcao;            return $this;        } else {            throw new ErrorException("funcao: Nenhum valor informado.");        }    }}