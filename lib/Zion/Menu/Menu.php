<?phpnamespace Zion\Menu;class Menu extends MenuSql{    private $urlBase;    private $urlModuloBase;    private $arrayGrupo;    private $arrayModulo;    private $arrayPermissao;    private $gruposSelecionados;    private $modulosSemReferencia;    private $modulosComReferencia;    private $modulosReferentes;    private $arrayPacote;    public function __construct()    {        parent::__construct();        $this->urlBase = SIS_URL_BASE;        $this->urlModuloBase = SIS_URL_DEFAULT_BASE;        $this->arrayGrupo = array();        $this->arrayModulo = array();        $this->arrayPermissao = array();        $this->gruposSelecionados = array();        $this->modulosSemReferencia = array();        $this->modulosComReferencia = array();        $this->modulosReferentes = array();        $this->arrayPacote = array();    }    /**     * Menu::geraMenu()     * Monta um JSON com a estrutura de menus, de acordo com as permissões atribuídas ao usuário logado.     *      * @return string JSON com a estrura encontrada. Array ([1] => Array ([Grupo] => Grupo Maior [ModulosGrupo] => Modulos e Submodulos do grupo))     * @example Sempre que um array dentro de ModulosGrupo tiver um outro array na chave Subs, este será um subgrupo podendo ter módulos e outros subgrupos, recursivamente. False otherwise.     */    public function geraMenu($twig = false)    {        if (!isset($_SESSION['usuario_cod'])) {            return json_encode(array("sucesso" => false, "retorno" => "Usuário não autenticado."));        }        $usuario_cod = $_SESSION['usuario_cod'];        $this->arrayGrupo = $this->con->paraArray(parent::gruposDiponiveisSql());        $this->arrayModulo = $this->con->paraArray(parent::modulosDiponiveisSql(), null, "modulo_cod");        $this->arrayPermissao = $this->con->paraArray(parent::usuarioPermissaoModuloSql($usuario_cod), "modulo_cod");        $this->processaDetalhes();        $json = array();        foreach ($this->arrayGrupo as $dadosGrupo) {            if (!in_array($dadosGrupo['grupo_cod'], $this->gruposSelecionados)) {                continue;            }            $this->arrayPacote[$dadosGrupo['grupo_cod']] = $dadosGrupo['grupo_pacote'];            $grupoModuloCod = $dadosGrupo['grupo_cod'];            $json[$grupoModuloCod]['grupo'] = $dadosGrupo['grupo_nome']; //Inicia um grupo.            $json[$grupoModuloCod]['grupo_class'] = $dadosGrupo['grupo_class']; //Inicia um grupo.            $json[$grupoModuloCod]['modulosGrupo'] = $this->geraModulos($dadosGrupo['grupo_cod']); //Carrega os módulos e subgrupos do grupo recém-iniciado.        }        if ($twig === true) {            return $json;        }        return json_encode(array('sucesso' => true, 'retorno' => $json));    }    /**     * Menu::processaDetalhes()     *      * @return     */    private function processaDetalhes()    {        $todosModulos = array();        foreach ($this->arrayModulo as $dadosModulo) {            $todosModulos[$dadosModulo['modulo_cod']] = $dadosModulo['modulo_cod'];        }        $this->processaPermissoes($todosModulos);        foreach ($this->arrayModulo as $dadosModulo) {            if (in_array($dadosModulo['modulo_cod'], $this->arrayPermissao)) {                $this->gruposSelecionados[$dadosModulo['grupo_cod']] = $dadosModulo['grupo_cod'];            }            if (empty($dadosModulo['modulo_cod_referente'])) {                $this->modulosSemReferencia[$dadosModulo['grupo_cod']][$dadosModulo['modulo_cod']] = $dadosModulo['modulo_cod'];            } else {                $this->modulosComReferencia[$dadosModulo['modulo_cod']] = $dadosModulo['modulo_cod_referente'];                $this->modulosReferentes[$dadosModulo['modulo_cod_referente']][] = $dadosModulo['modulo_cod'];            }        }    }    /**     * Menu::processaPermissoes()     *      * @param mixed $todosModulos     * @return     */    private function processaPermissoes($todosModulos)    {        foreach ($todosModulos as $moduloCod) {            if (!empty($this->arrayModulo[$moduloCod]['modulo_cod_referente']) and in_array($moduloCod, $this->arrayPermissao)) {                $this->analisaPermissaoRecursivo($moduloCod);            }        }        $this->arrayPermissao = array_unique($this->arrayPermissao);    }    /**     * Menu::analisaPermissaoRecursivo()     *      * @param mixed $moduloCod     * @param mixed $buffer     * @return     */    private function analisaPermissaoRecursivo($moduloCod, $buffer = array())    {        $buffer[$moduloCod] = $moduloCod;        if (empty($this->arrayModulo[$moduloCod]['modulo_cod_referente'])) {            $this->arrayPermissao = array_merge($this->arrayPermissao, $buffer);        } else {            $this->analisaPermissaoRecursivo($this->arrayModulo[$moduloCod]['modulo_cod_referente'], $buffer);        }    }    /**     * Menu::geraModulos()     *      * @param mixed $grupoCod     * @return     */    private function geraModulos($grupoCod)    {        $nModulos = count($this->modulosSemReferencia[$grupoCod]);        //Inicia Módulo        $json = array();        if ($nModulos > 0) {            foreach ($this->modulosSemReferencia[$grupoCod] as $moduloCod) {                if (in_array($moduloCod, $this->arrayPermissao)) {                    array_push($json, $this->geraModulo($moduloCod));                }            }        }        return $json;    }    /**     * Menu::geraModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraModulo($moduloCod)    {        //Se módulo Possui Sub Modulo        if (in_array($moduloCod, $this->modulosComReferencia)) {            return $this->geraSubModulo($moduloCod);        }        $dadosModulo = $this->arrayModulo[$moduloCod];        if (in_array($moduloCod, $this->arrayPermissao) and $dadosModulo['modulo_visivel_menu'] == 'S') {            return $this->populaModulo($dadosModulo['modulo_nome'], $dadosModulo['modulo_nome'], $dadosModulo['modulo_nome_menu'], $this->arrayPacote[$dadosModulo['grupo_cod']], null, $dadosModulo['modulo_class'], $dadosModulo['modulo_namespace']);        }    }    /**     * Menu::geraSubModulo()     *      * @param mixed $moduloCod     * @return     */    private function geraSubModulo($moduloCod)    {        $dadosSubModulo = $this->arrayModulo[$moduloCod];        $nModulos = count($this->modulosReferentes[$moduloCod]);        $json = array();        if ($nModulos > 0 and in_array($moduloCod, $this->arrayPermissao)) {            $json = $this->iniciaSubModulo($dadosSubModulo['modulo_nome'], $dadosSubModulo['modulo_nome'], $dadosSubModulo['modulo_nome_menu'], $dadosSubModulo['modulo_class']);            foreach ($this->modulosReferentes[$moduloCod] as $referenciaCod) {                if (in_array($referenciaCod, $this->modulosComReferencia)) {                    $json['subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                } else {                    $json['subs'][$referenciaCod] = $this->geraModulo($referenciaCod);                }            }            return $json;        }    }    /**     * MenuCss::iniciaSubModulo()     *      * @param mixed $moduloDesc     * @param mixed $nomeMenu     * @return     */    private function iniciaSubModulo($moduloNome, $moduloDesc, $nomeMenu, $moduloClass = '')    {        return array("modulo" => $moduloNome, "menu" => $nomeMenu, "menuDesc" => $moduloDesc, "menuUrl" => "#", "moduloClass" => $moduloClass);    }    /**     * MenuCss::populaModulo()     *      * @param mixed $moduloNome     * @param mixed $moduloDesc     * @param mixed $nomeMenu     * @param mixed $pacote     * @param mixed $moduloBase     * @param string $moduloNamespace Namespace do Módulo (opcional)     * @return     */    private function populaModulo($moduloNome, $moduloDesc, $nomeMenu, $pacote, $moduloBase, $moduloClass = '', $moduloNamespace = '')    {        if ($moduloNamespace) {            $url = $this->urlBase . $moduloNamespace;        } else {            if ($moduloBase) {                $url = $this->urlModuloBase . $pacote . "/" . $moduloNome . "/";            } else {                $url = $this->urlBase . $pacote . "/" . $moduloNome . "/";            }        }        return array("modulo" => $moduloNome, "menu" => $nomeMenu, "menuDesc" => $moduloDesc, "menuUrl" => $url, "moduloClass" => $moduloClass, "subs" => false);    }}