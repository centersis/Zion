<?phpnamespace Zion\Menu;use Zion\Banco\Conexao;abstract class MenuSql {    protected $con;    public function __construct() {        $this->con = Conexao::conectar();    }    /**     * Retorna o número de Grupos disponíveis para um determinado usuário.     * @param int $usuario_cod     * @return int     */    protected function gruposDiponiveisUsuario($usuario_cod) {        $qb = $this->con->qb();        $sql = $qb->select('a.grupo_cod')                ->from('_grupo', 'a')                ->innerJoin('a', '_modulo', 'b', 'a.modulo_cod = b.modulo_cod')                ->innerJoin('b', '_acao_modulo', 'c', 'b.modulo_cod = c.modulo_cod')                ->innerJoin('c', '_permissao', 'd', 'c.acao_modulo_cod = d.acao_modulo_cod')                ->where($qb->expr()->eq('d.usuario_cod', ':usuario_cod'))                ->setParameter('usuario_cod', $usuario_cod, \PDO::PARAM_INT)                ->setFirstResult(0)                ->setMaxResults(1);        return $this->con->execNLinhas($sql);    }    /**     * Retorna um objeto QueryBuilder com todos os grupos disponíveis sem      * fazer qualquer tipo de restrição ordenados por "grupoPosicao" ascendente     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function gruposDiponiveisSql() {        $qb = $this->con->qb();        $qb->select('grupo_cod,grupo_nome,grupo_pacote,grupo_class')                ->from('_grupo', '')                ->orderBy('grupo_posicao', 'ASC');        return $qb;    }    /**     * Retorna um objeto QueryBuilder com todos os módulos disponíveis sem      * fazer qualquer tipo de restrição ordenados por "moduloPosicao" ascendente     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function modulosDiponiveisSql() {        $qb = $this->con->qb();        $qb->select('*')                ->from('_modulo', '')                ->orderBy('modulo_posicao', 'ASC');        return $qb;    }    /**     * Retorna um objeto QueryBuilder com todos os módulos que o usuário tem     * privilegios de acesso     * @param int $usuario_cod     * @return \Doctrine\DBAL\Query\QueryBuilder     */    protected function usuarioPermissaoModuloSql($usuario_cod) {        $qb = $this->con->qb();        $qb->select('d.modulo_cod')                ->from('_usuario', 'a')                ->innerJoin('a', '_perfil', 'b', 'a.perfil_cod = b.perfil_cod')                ->innerJoin('b', '_permissao', 'c', 'b.perfil_cod = c.perfil_cod')                ->innerJoin('c', '_acao_modulo', 'd', 'c.acao_modulo_cod = d.acao_modulo_cod')                ->where($qb->expr()->isNotNull('c.permissao_cod'))                ->andWhere($qb->expr()->eq('a.usuario_cod', ':usuario_cod'))                ->setParameter('usuario_cod', $usuario_cod, \PDO::PARAM_INT)                ->groupBy('d.modulo_cod');        return $qb;    }    /**     * Retorna um resultset com os módulos referentes ao código do módulo      * informado no parametro int $referencia     * @param int $referencia     * @param bool $visivel     * @return resultset     */    protected function modulosReferentes($referencia, $visivel = true) {        $qb = $this->con->qb();        $qb->select('modulo_cod', 'nome_menu')                ->from('_modulo', '')                ->andWhere($qb->expr()->eq('modulo_referente', ':modulo_referente'))                ->setParameter('modulo_referente', $referencia, \PDO::PARAM_INT);        if ($visivel === true) {            $qb->andWhere($qb->expr()->eq('visivel_menu', $qb->expr()->literal('S')));        }        $qb->orderBy('posicao', 'ASC');        return $this->con->executar($qb);    }}