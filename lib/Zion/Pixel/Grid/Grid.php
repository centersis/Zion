<?phpnamespace Zion\Pixel\Grid;use Zion\Paginacao\Parametros;class Grid extends GridVO{    private $meusDadosConverte;    public function __construct()    {        parent::__construct();    }    /**     * Cria uma instrução em html com um link de ordenação     * @param string $campoDescricao     * @param string $campoTb     * @return string     */    public function ordena($campoDescricao, $campoTb)    {        $quemOrdena = parent::getQuemOrdena();        $metodoFiltra = parent::getMetodoFiltra();        $paginaAtual = parent::getPaginaAtual();        $naoOrdenePor = parent::getNaoOrdenePor();        $queryStringOrdenacao = parent::getQsOrdenacao();        //Iniciar ordenando Ascendente         $tipoOrdenacao = (empty(filter_input(INPUT_GET, 'to'))) ? 'ASC' : parent::getTipoOrdenacao();        //Verifica Se o Não Permite Ordenação        if (in_array($campoTb, $naoOrdenePor)) {            return [                'tipoOrdenacao' => NULL,                'metodoFiltra' => NULL,                'campoDescricao' => $campoDescricao];        }        $sisOrigem = filter_input(INPUT_GET, 'sisOrigem');        $sisUFC = filter_input(INPUT_GET, 'sisUFC');        if ($campoTb == $quemOrdena) {            $novoTipo = $this->proximaOrdenacao($tipoOrdenacao);            //Seta Quem ordena            Parametros::setParametros("Full", ["qo" => $campoTb, "pa" => $paginaAtual, 'sisUFC' => $sisUFC, 'sisOrigem' => $sisOrigem, 'qso' => $queryStringOrdenacao]);            //Muda o Tipo de Ordenação do Link            $qS = Parametros::addQueryString(Parametros::getQueryString(), ["to" => $novoTipo]);        } else {            //Seta quem ordena e o tipo de ordenacao            Parametros::setParametros("Full", ["qo" => $campoTb, "to" => $tipoOrdenacao, "pa" => $paginaAtual, 'sisUFC' => $sisUFC, 'sisOrigem' => $sisOrigem, 'qso' => $queryStringOrdenacao]);            //Recupera QS            $qS = Parametros::getQueryString();        }        //Ordenação        if (!empty($novoTipo)) {            $tipoOrdenacao = $novoTipo;        }        return [            'tipoOrdenacao' => $tipoOrdenacao,            'metodoFiltra' => $metodoFiltra . '(\'' . $qS . '\')',            'campoDescricao' => $campoDescricao];    }    private function proximaOrdenacao($ornecaoAtual)    {        switch ($ornecaoAtual) {            case 'ASC': return 'DESC';            case 'DESC': return 'NILL';            case 'NILL': return 'ASC';            default : return 'ASC';        }    }    public function converteValor($linha, $dadosConverte)    {        $getDadosConverte = (is_array($dadosConverte) ? $dadosConverte : $this->meusDadosConverte);        $objeto = $dadosConverte[0]; //Esta sendo exucutada pelo eval        $metodo = $dadosConverte[1];        $campo = $dadosConverte[2];        $pI = (empty($getDadosConverte[3])) ? array() : $getDadosConverte[3];        $pE = (empty($getDadosConverte[4])) ? array() : $getDadosConverte[4];        $ordem = $dadosConverte[5];        if (!empty($pI)) {            foreach ($pI as $valor) {                $arrayPI[] = $linha[$valor];            }        }        if ($ordem == "IE") {            $arParametros = (empty($arrayPI)) ? $pE : array_merge($arrayPI, $pE);        } else {            $arParametros = (empty($arrayPI)) ? $pE : array_merge($pE, $arrayPI);        }        if (!is_array($arParametros)) {            return $linha[$campo];        } else {            $parametros = '';            foreach ($arParametros as $valores) {                $parametros .= "'" . $valores . "',";            }            $parametrosSeparados = substr($parametros, 0, -1);            eval('$retorno = $objeto->' . $metodo . '(' . $parametrosSeparados . ');');            return $retorno;        }    }    public function verificaComplementoTD($linha, $dadosConverte)    {        $getDadosConverte = $dadosConverte;        $objeto = $dadosConverte[0]; //Esta sendo exucutada pelo eval        $metodo = $dadosConverte[1];        $pI = (empty($getDadosConverte[2])) ? array() : $getDadosConverte[2];        $pE = (empty($getDadosConverte[3])) ? array() : $getDadosConverte[3];        $ordem = $dadosConverte[4];        if (!empty($pI)) {            foreach ($pI as $valor) {                $arrayPI[] = $linha[$valor];            }        }        if ($ordem == "IE") {            $arParametros = (empty($arrayPI)) ? $pE : array_merge($arrayPI, $pE);        } else {            $arParametros = (empty($arrayPI)) ? $pE : array_merge($pE, $arrayPI);        }        if (!is_array($arParametros)) {            return '';        } else {            $parametros = '';            foreach ($arParametros as $valores) {                $parametros .= "'" . $valores . "',";            }            $parametrosSeparados = substr($parametros, 0, -1);            eval('$retorno = $objeto->' . $metodo . '(' . $parametrosSeparados . ');');            return $retorno;        }    }    public function resultadoEval($linha, $evalCod)    {        eval($evalCod[0]);        return $r;    }    public function setMeusDadosConverte($dadosConverte)    {        $this->meusDadosConverte = $dadosConverte;    }}