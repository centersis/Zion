<?phpnamespace Zion\Paginacao;class Parametros{    public static $parametros = [];    public static function limpaParametros()    {        self::$parametros = [];    }    public static function setParametros($metodo, $valores, array $extra = array())    {        if (!empty($extra)) {            $valores = \array_merge($valores, $extra);        }        switch (\strtoupper($metodo)) {            case "GET":                foreach ($valores as $valor) {                    $getValor = \filter_input(\INPUT_GET, $valor);                    if ($getValor != '') {                        self::$parametros[$valor] = $getValor;                    }                }                break;            case "POST":                foreach ($valores as $valor) {                    $postValor = \filter_input(\INPUT_POST, $valor);                    if ($postValor != '') {                        self::$parametros[$valor] = $postValor;                    }                }                break;            case "REQUEST":                foreach ($valores as $valor) {                    $requestValor = \filter_input(\INPUT_REQUEST, $valor);                    if ($requestValor != '') {                        self::$parametros[$valor] = $requestValor;                    }                }                break;            case "FULL":                foreach ($valores as $valor => $conteudo) {                    self::$parametros[$valor] = $conteudo;                }                break;        }    }    public static function getQueryString()    {        if (\is_array(self::$parametros) and ! empty(self::$parametros)) {            $query = '';            foreach (self::$parametros as $campo => $valor) {                if (\is_array($valor)) {                    foreach ($valor as $c => $v) {                        $query .= "&" . $c . "=" . \urlencode($v);                    }                } else {                    $query .= "&" . $campo . "=" . \urlencode($valor);                }            }            return \substr($query, 1);        } else {            return "";        }    }    public static function addQueryString($queryAtual, $campoValor)    {        $novaQuery = '';        if (!empty($queryAtual)) {            $vCampos = \explode("&", $queryAtual);            if (\is_array($vCampos)) {                foreach ($vCampos as $campoJunto) {                    $vetJunto = \explode("=", $campoJunto);                    $arrayRetorno[$vetJunto[0]] = $vetJunto[1];                }                foreach ($campoValor as $campo => $valor) {                    $arrayRetorno[$campo] = $valor;                }                foreach ($arrayRetorno as $campo => $valor) {                    $novaQuery.="&" . $campo . "=" . $valor;                }                return \substr($novaQuery, 1);            }        } else {            foreach ($campoValor as $campo => $valor) {                $novaQuery.= "&" . $campo . "=" . $valor;            }            return \substr($novaQuery, 1);        }    }    public static function queryStringParaArray($qs, $campoAtualizar = '', $valorAtualizar = '')    {        $ret = [];        if (\is_string($qs) and ! empty($qs)) {            $query = \urldecode($qs);            $partes1 = \explode('&', $query);            foreach ($partes1 as $parte1) {                $partes2 = \explode('=', $parte1);                if (\array_key_exists(1, $partes2)) {                    $ret[$partes2[0]] = $partes2[1];                } else {                    unset($ret[$partes2[0]]);                }            }        }        if ($campoAtualizar) {            if ($valorAtualizar !== '') {                $ret[$campoAtualizar] = $valorAtualizar;            } else {                unset($ret[$campoAtualizar]);            }        }        return $ret;    }    public static function atualizaQueryString($qs, $campoAtualizar, $valorAtualizar)    {        $ret = self::queryStringParaArray($qs, $campoAtualizar, $valorAtualizar);        return \http_build_query($ret);    }}